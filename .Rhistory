z[i] ~ dbern(psi)
}
logit(p) <- alpha0
for(i in 1:nrow_samp_df){
y[i] ~ dbern(z[site_ndx[i]] * p)
}
})
site_df <- data$site_df
samp_df <- df$samp_df
samp_df <- samp_df %>%
group_by(site) %>%
arrange(site)
init_nocovs <- function(){
out <- list(
alpha0 <- runif(1, -2, 2),
beta0 <- runif(1, -2, 2),
z = rbinom(nrow(site_df), 1, .5)
)
return(out)
}
this_cluster <- makeCluster(3)
fit <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_model,
code = nocovs_code,
data = list(y = samp_df$y),
constants = list(
# loop constants
nsite = nrow(site_df),
nrow_site_df = nrow(site_df),
nrow_samp_df = nrow(samp_df),
# indices
site_ndx = samp_df$site
),
niter = 2000,
nchains = 1,
thin = 1,
nburnin = 0,
inits = init_nocovs,
monitors = c("z")
)
init_nocovs
init_nocovs()
init_nocovs <- function(){
out <- list(
alpha0 = runif(1, -2, 2),
beta0 = runif(1, -2, 2),
z = rbinom(nrow(site_df), 1, .5)
)
return(out)
}
this_cluster <- makeCluster(3)
fit <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_model,
code = nocovs_code,
data = list(y = samp_df$y),
constants = list(
# loop constants
nsite = nrow(site_df),
nrow_site_df = nrow(site_df),
nrow_samp_df = nrow(samp_df),
# indices
site_ndx = samp_df$site
),
niter = 2000,
nchains = 1,
thin = 1,
nburnin = 0,
inits = init_nocovs(),
monitors = c("z")
)
stopCluster(this_cluster)
warmup = nrow(fit[[1]])/2
warmup
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
fit_warmup
thin <- 1
coda_samples <- as.mcmc.list(lapply(fit_warmup, function(x) as.mcmc(
x, start = warmup+1, end = nrow(fit), thin = thin
)))
library(coda)
coda_samples <- as.mcmc.list(lapply(fit_warmup, function(x) as.mcmc(
x, start = warmup+1, end = nrow(fit), thin = thin
)))
sum <- summary(coda_samples)
View(sum)
params <- dimnames(sum$statistics)[[1]]
params
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
tmp_sum <- cbind(sum$statistics, sum$quantiles)
tmp_sum
nimble_summary <- function(fit, warmup = nrow(fit[[1]])/2, thin = 1){
# convert to coda for normal summary
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
coda_samples <- as.mcmc.list(lapply(fit_warmup, function(x) as.mcmc(
x, start = warmup+1, end = nrow(fit), thin = thin
)))
sum <- summary(coda_samples)
params <- dimnames(sum$statistics)[[1]]
tmp_sum <- cbind(sum$statistics, sum$quantiles)
# get r hat / n_eff
mat <- matrix(NA, nrow = nrow(tmp_sum), ncol = 3)
colnames(mat) <- c("Rhat", "ess_bulk", "ess_tail")
for(i in 1:nrow(tmp_sum)){
tmp <- sapply(fit, function(x) x[,i])
mat[i,] <- c(Rhat(tmp), ess_bulk(tmp), ess_tail(tmp))
}
# get mode
all_samps <- do.call("rbind", coda_samples)
mod <- apply(all_samps, 2, getmode)
# out
out <- cbind(tmp_sum, mode = mod, mat)
return(out)
}
View(tmp_sum)
sum <- nimble_summary(fit)
library(tidyverse);library(nimble);library(parallel);library(coda);library(rstan)
sum <- nimble_summary(fit)
sum
plot(fit[[1]][, "z[14"])
plot(fit[[1]][, "z[14]", type = "l")
plot(fit[[1]][, "z[14]"], type = "l")
plot(fit[[1]][, "z[13]"], type = "l")
plot(fit[[1]][, "z[12]"], type = "l")
plot(fit[[1]][, "alpha0"], type = "l")
plot(fit[[1]][, "beta0"], type = "l")
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
fit_warmup
str(fit_warmup)
fit_warmup <- do.call("rbind", fit_warmup)
View(fit_warmup)
dim(fit_warmu)
dim(fit_warmup)
fit_warmup %>% select(grepl("z", colnames(.)))
grepl("z", colnames(.))
grepl("z", colnames(fit_warmup))
fit_warmup %>% select(grepl("z", colnames(fit_warmup)))
?apply
which(grepl("z", colnames(fit_warmup)))
fit_warmup %>% select(which(grepl("z", colnames(.))))
select(as.numeric(grepl("z", colnames(.))))
fit_warmup %>% select(as.numeric(grepl("z", colnames(.))))
fit_warmup %>%
select(grepl("z", .))
fit_warmup <- fit_warmup %>%
select(contains(`z`))
fit_warmup %>%
select(contains(`z`))
fit_warmup <- data.frame(fit_warmup)
fit_warmup <- fit_warmup %>%
select(contains(`z`))
fit_warmup <- fit_warmup %>%
select(grepl("z", .))
fit_warmup %>%
select(grepl("z", .))
fit_warmup <- fit_warmup %>%
select(contains("z"))
fit_warmup %>%
select(contains("z"))
fit_warmup <- do.call("rbind", fit_warmup)
warmup = nrow(fit[[1]])/2
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
str(fit_warmup)
fit_warmup <- do.call("rbind", fit_warmup)
fit_warmup <- data.frame(fit_warmup)
fit_warmup <- fit_warmup %>%
select(contains("z"))
?apply
apply(fit_warmup, 2, getmode)
mean(colmodes) <-
}
mean(colmodes)
colmodes <- apply(fit_warmup, 2, getmode)
mean(colmodes)
nocovs_fit <- function(data = list(site_df = NULL, samp_df = NULL)){
library(parallel)
library(coda)
nocovs_code <- nimbleCode({
# priors
beta0 ~ dnorm(0, var = 2)
alpha0 ~ dnorm(0, var = 2)
logit(psi) <- beta0
for(i in 1:nrow_site_df){
z[i] ~ dbern(psi)
}
logit(p) <- alpha0
for(i in 1:nrow_samp_df){
y[i] ~ dbern(z[site_ndx[i]] * p)
}
})
site_df <- data$site_df
samp_df <- df$samp_df
samp_df <- samp_df %>%
group_by(site) %>%
arrange(site)
init_nocovs <- function(){
out <- list(
alpha0 = runif(1, -2, 2),
beta0 = runif(1, -2, 2),
z = rbinom(nrow(site_df), 1, .5)
)
return(out)
}
this_cluster <- makeCluster(3)
fit <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_model,
code = nocovs_code,
data = list(y = samp_df$y),
constants = list(
# loop constants
nsite = nrow(site_df),
nrow_site_df = nrow(site_df),
nrow_samp_df = nrow(samp_df),
# indices
site_ndx = samp_df$site
),
niter = 2000,
nchains = 1,
thin = 1,
nburnin = 0,
inits = init_nocovs(),
monitors = c("z")
)
stopCluster(this_cluster)
warmup = nrow(fit[[1]])/2
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
str(fit_warmup)
fit_warmup <- do.call("rbind", fit_warmup)
fit_warmup <- data.frame(fit_warmup)
fit_warmup <- fit_warmup %>%
select(contains("z"))
colmodes <- apply(fit_warmup, 2, getmode)
out <- colmodes
return(out)
}
site_df
nocovs_fit(data = list(site_df = site_df, samp_df = samp_df))
nocovs_fit <- function(data = list(site_df = NULL, samp_df = NULL)){
library(parallel)
library(coda)
nocovs_code <- nimbleCode({
# priors
beta0 ~ dnorm(0, var = 2)
alpha0 ~ dnorm(0, var = 2)
logit(psi) <- beta0
for(i in 1:nrow_site_df){
z[i] ~ dbern(psi)
}
logit(p) <- alpha0
for(i in 1:nrow_samp_df){
y[i] ~ dbern(z[site_ndx[i]] * p)
}
})
site_df <- data$site_df
samp_df <- df$samp_df
samp_df <- samp_df %>%
group_by(site) %>%
arrange(site)
init_nocovs <- function(){
out <- list(
alpha0 = runif(1, -2, 2),
beta0 = runif(1, -2, 2),
z = rbinom(nrow(site_df), 1, .5)
)
return(out)
}
this_cluster <- makeCluster(3)
fit <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_model,
code = nocovs_code,
data = list(y = samp_df$y),
constants = list(
# loop constants
nsite = nrow(site_df),
nrow_site_df = nrow(site_df),
nrow_samp_df = nrow(samp_df),
# indices
site_ndx = samp_df$site
),
niter = 2000,
nchains = 1,
thin = 1,
nburnin = 0,
inits = init_nocovs(),
monitors = c("z")
)
stopCluster(this_cluster)
warmup = nrow(fit[[1]])/2
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
str(fit_warmup)
fit_warmup <- do.call("rbind", fit_warmup)
fit_warmup <- data.frame(fit_warmup)
fit_warmup <- fit_warmup %>%
select(contains("z"))
colmodes <- apply(fit_warmup, 2, getmode)
out <- colmodes
return(out)
}
nocovs_fit(data = list(site_df = site_df, samp_df = samp_df))
nocovs_fit <- function(data = list(site_df = NULL, samp_df = NULL)){
library(parallel)
library(coda)
nocovs_code <- nimbleCode({
# priors
beta0 ~ dnorm(0, var = 2)
alpha0 ~ dnorm(0, var = 2)
logit(psi) <- beta0
for(i in 1:nrow_site_df){
z[i] ~ dbern(psi)
}
logit(p) <- alpha0
for(i in 1:nrow_samp_df){
y[i] ~ dbern(z[site_ndx[i]] * p)
}
})
site_df <- data$site_df
samp_df <- data$samp_df
samp_df <- samp_df %>%
group_by(site) %>%
arrange(site)
init_nocovs <- function(){
out <- list(
alpha0 = runif(1, -2, 2),
beta0 = runif(1, -2, 2),
z = rbinom(nrow(site_df), 1, .5)
)
return(out)
}
this_cluster <- makeCluster(3)
fit <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_model,
code = nocovs_code,
data = list(y = samp_df$y),
constants = list(
# loop constants
nsite = nrow(site_df),
nrow_site_df = nrow(site_df),
nrow_samp_df = nrow(samp_df),
# indices
site_ndx = samp_df$site
),
niter = 2000,
nchains = 1,
thin = 1,
nburnin = 0,
inits = init_nocovs(),
monitors = c("z")
)
stopCluster(this_cluster)
warmup = nrow(fit[[1]])/2
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
str(fit_warmup)
fit_warmup <- do.call("rbind", fit_warmup)
fit_warmup <- data.frame(fit_warmup)
fit_warmup <- fit_warmup %>%
select(contains("z"))
colmodes <- apply(fit_warmup, 2, getmode)
out <- colmodes
return(out)
}
nocovs_fit(data = list(site_df = site_df, samp_df = samp_df))
nocovs_fit <- function(data = list(site_df = NULL, samp_df = NULL)){
library(parallel)
library(coda)
nocovs_code <- nimbleCode({
# priors
beta0 ~ dnorm(0, var = 2)
alpha0 ~ dnorm(0, var = 2)
logit(psi) <- beta0
for(i in 1:nrow_site_df){
z[i] ~ dbern(psi)
}
logit(p) <- alpha0
for(i in 1:nrow_samp_df){
y[i] ~ dbern(z[site_ndx[i]] * p)
}
})
site_df <- data$site_df
samp_df <- data$samp_df
samp_df <- samp_df %>%
group_by(site) %>%
arrange(site)
init_nocovs <- function(){
out <- list(
alpha0 = runif(1, -2, 2),
beta0 = runif(1, -2, 2),
z = rbinom(nrow(site_df), 1, .5)
)
return(out)
}
this_cluster <- makeCluster(3)
fit <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_model,
code = nocovs_code,
data = list(y = samp_df$y),
constants = list(
# loop constants
nsite = nrow(site_df),
nrow_site_df = nrow(site_df),
nrow_samp_df = nrow(samp_df),
# indices
site_ndx = samp_df$site
),
niter = 2000,
nchains = 1,
thin = 1,
nburnin = 0,
inits = init_nocovs(),
monitors = c("z")
)
stopCluster(this_cluster)
warmup = nrow(fit[[1]])/2
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
str(fit_warmup)
fit_warmup <- do.call("rbind", fit_warmup)
fit_warmup <- data.frame(fit_warmup)
fit_warmup <- fit_warmup %>%
select(contains("z"))
colmodes <- apply(fit_warmup, 2, getmode)
out <- mean(colmodes)
return(out)
}
nocovs_fit(data = list(site_df = site_df, samp_df = samp_df))
est_nocovs <- function(data = list(site_df = NULL, samp_df = NULL)){
library(parallel)
library(coda)
nocovs_code <- nimbleCode({
# priors
beta0 ~ dnorm(0, var = 2)
alpha0 ~ dnorm(0, var = 2)
logit(psi) <- beta0
for(i in 1:nrow_site_df){
z[i] ~ dbern(psi)
}
logit(p) <- alpha0
for(i in 1:nrow_samp_df){
y[i] ~ dbern(z[site_ndx[i]] * p)
}
})
site_df <- data$site_df
samp_df <- data$samp_df
samp_df <- samp_df %>%
group_by(site) %>%
arrange(site)
init_nocovs <- function(){
out <- list(
alpha0 = runif(1, -2, 2),
beta0 = runif(1, -2, 2),
z = rbinom(nrow(site_df), 1, .5)
)
return(out)
}
this_cluster <- makeCluster(3)
fit <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_model,
code = nocovs_code,
data = list(y = samp_df$y),
constants = list(
# loop constants
nsite = nrow(site_df),
nrow_site_df = nrow(site_df),
nrow_samp_df = nrow(samp_df),
# indices
site_ndx = samp_df$site
),
niter = 2000,
nchains = 1,
thin = 1,
nburnin = 0,
inits = init_nocovs(),
monitors = c("z")
)
stopCluster(this_cluster)
warmup = nrow(fit[[1]])/2
fit_warmup <- lapply(fit, function(x) x[(warmup+1):nrow(x),])
str(fit_warmup)
fit_warmup <- do.call("rbind", fit_warmup)
fit_warmup <- data.frame(fit_warmup)
fit_warmup <- fit_warmup %>%
select(contains("z"))
colmodes <- apply(fit_warmup, 2, getmode)
out <- mean(colmodes)
return(out)
}
est_nocovs(data = list(site_df = site_df, samp_df = samp_df))
est_z <- est_nocovs(data = list(site_df = site_df, samp_df = samp_df))
est_z
est_z^(-1)(1-est_z)^(-1)
est_z
mean_z[1]^(-1)(1-mean_z[1])^(-1)
mean_z <- est_nocovs(data = list(site_df = site_df, samp_df = samp_df))
mean_z[1]^(-1)(1-mean_z[1])^(-1)
mean_z
mean_z^(-1)
1/0.13
mean_z[1]^(-1)*(1-mean_z[1])^(-1)
