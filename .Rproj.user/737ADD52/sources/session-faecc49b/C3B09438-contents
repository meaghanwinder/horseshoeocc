#' Credible interval plots for occupancy model parameters fit using the regularized horseshoe prior
#'
#' @param x an object of class \code{summary.horseshoeocc}, typically the
#' result of a call to \code{\link{summary.horseshoeocc}}.
#' @param which the parameters for which to generate trace plots. The value can
#' be a specific parameter (i.e. \code{"beta[1]"}), or you can plot the trace plots
#' for all of the beta coefficients using \code{"beta"}; defaults to \code{"beta"}.
#' @param hdi logical; defaults to \code{FALSE}. If \code{TRUE}, the highest
#' (posterior) density intervals (HDI) are plotted.
#' @param equal optional value to compare to each credibility interval.
#' @param ... Other arguments.
#'
#' @returns Returns a ggplot.
#' @export
#'
plot.summary.horseshoeocc <- function(x, which = c("beta"), hdi = FALSE, equal = NULL, ...){
  if(length(which) == 1){
    if(all(is.numeric(which))){
      plot_df <- x %>%
        as.data.frame() %>%
        slice(which) %>%
        mutate(var = stringr::str_remove_all(rownames(.), "[:punct:]"))

      if(hdi == T){
        title =  paste0('95% HDI credibility intervals for ', rownames(plot_df))
      } else if(hdi == F){
        title =  paste0('95% credibility intervals for ', rownames(plot_df))
      }
    } else if(all(is.character(which))){
      plot_df <- x %>%
        as.data.frame() %>%
        filter(stringr::str_detect(rownames(.), which)) %>%
        mutate(var = stringr::str_remove_all(rownames(.), "[:punct:]"))

      if(hdi == T){
        title =  paste0('95% HDI credibility intervals for ', which)
      } else if(hdi == F){
        title =  paste0('95% credibility intervals for ', which)
      }
    }

  } else if(length(which) > 1){
    if(all(is.numeric(which))){
      plot_df <- x %>%
        as.data.frame() %>%
        slice(which) %>%
        mutate(var = stringr::str_remove_all(rownames(.), "[:punct:]"))

      if(hdi == T){
        title =  paste0('95% HDI credibility intervals for ', paste(rownames(plot_df), collapse = " and "))
      } else if(hdi == F){
        title =  paste0('95% credibility intervals for ', paste(rownames(plot_df), collapse = " and "))
      }
    } else if(all(is.character(which))){
      plot_df <- list()
      for(i in 1:length(which)){
        plot_df[[i]] <- x %>%
          as.data.frame() %>%
          filter(stringr::str_detect(rownames(.), which[i])) %>%
          mutate(var = stringr::str_remove_all(rownames(.), "[:punct:]"))
      }
      plot_df <- do.call("rbind", plot_df)

      paste0(which)
      if(hdi == T){
        title =  paste0('95% HDI credibility intervals for ', paste(which, collapse = " and "))
      } else if(hdi == F){
        title =  paste0('95% HDI credibility intervals for ', paste(which, collapse = " and "))
      }
    }

  }


  if(hdi == T){
    out <- plot_df %>%
      ggplot2::ggplot() +
      ggplot2::geom_point(ggplot2::aes(x = `HDI 2.5%`, y = var), shape = "|", size = 3) +
      ggplot2::geom_point(ggplot2::aes(x = `HDI 97.5%`, y = var), shape = "|", size = 3) +
      ggplot2::geom_segment(ggplot2::aes(x = `HDI 2.5%`, y = var, xend = `HDI 97.5%`, yend = var)) +
      ggplot2::geom_point(ggplot2::aes(y = var, x = Mean)) +
      ggplot2::labs(title = title,
                    x = NULL,
                    y = NULL) +
      ggplot2::theme_bw()
    if(!is.null(equal)){
      out <- out +
        ggplot2::geom_vline(xintercept = equal, color = "grey")
    }

    return(out)

  } else if(hdi == F){
    out <- plot_df %>%
      ggplot2::ggplot() +
      ggplot2::geom_point(ggplot2::aes(x = `2.5%`, y = var), shape = "|", size = 3) +
      ggplot2::geom_point(ggplot2::aes(x = `97.5%`, y = var), shape = "|", size = 3) +
      ggplot2::geom_segment(ggplot2::aes(x = `2.5%`, y = var, xend = `97.5%`, yend = var)) +
      ggplot2::geom_point(ggplot2::aes(y = var, x = Mean)) +
      ggplot2::labs(title = title,
                    x = NULL,
                    y = NULL) +
      ggplot2::theme_bw()

    if(!is.null(equal)){
      out <- out +
        ggplot2::geom_vline(xintercept = equal, color = "grey")
    }

    return(out)
  }

}
