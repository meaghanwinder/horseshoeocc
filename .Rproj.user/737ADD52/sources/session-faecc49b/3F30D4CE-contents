#' Title
#'
#' @param x
#' @param which
#' @param hdi
#' @param equal
#' @param ...
#'
#' @returns
#' @export
#'
#' @examples
plot.horseshoeocc_derivedsum <- function(x, which = c("psi"), hdi = FALSE, equal = NULL, ...){
  psi_sum <- x$psi
  p_sum <- x$p

  if(which == "psi"){
    plot_df <- psi_sum %>%
      as.data.frame() %>%
      mutate(var = str_extract_all(rownames(.), "[:digit:]+"),
             var = as.numeric(var))
    if(hdi == T){
      title =  paste0('95% HDI credibility intervals for ', which)
    } else if(hdi == F){
      title =  paste0('95% credibility intervals for ', which)
    }
    xlab = "psi"

    if(hdi == T){
      out <- plot_df %>%
        ggplot2::ggplot() +
        ggplot2::geom_point(ggplot2::aes(x = `HDI 2.5%`, y = var), shape = "|", size = 3) +
        ggplot2::geom_point(ggplot2::aes(x = `HDI 97.5%`, y = var), shape = "|", size = 3) +
        ggplot2::geom_segment(ggplot2::aes(x = `HDI 2.5%`, y = var, xend = `HDI 97.5%`, yend = var)) +
        ggplot2::geom_point(ggplot2::aes(y = var, x = Mean)) +
        ggplot2::labs(title = title,
                      x = xlab,
                      y = NULL) +
        ggplot2::scale_y_continuous(breaks = seq(1, nrow(psi_sum))) +
        ggplot2::theme_bw()
      if(!is.null(equal)){
        out <- out +
          ggplot2::geom_vline(xintercept = equal)
      }
    } else if(hdi == F){
      out <- plot_df %>%
        ggplot2::ggplot() +
        ggplot2::geom_point(ggplot2::aes(x = `2.5%`, y = var), shape = "|", size = 3) +
        ggplot2::geom_point(ggplot2::aes(x = `97.5%`, y = var), shape = "|", size = 3) +
        ggplot2::geom_segment(ggplot2::aes(x = `2.5%`, y = var, xend = `97.5%`, yend = var)) +
        ggplot2::geom_point(ggplot2::aes(y = var, x = Mean)) +
        ggplot2::labs(title = title,
                      x = xlab,
                      y = NULL) +
        ggplot2::scale_y_continuous(breaks = seq(1, nrow(psi_sum))) +
        ggplot2::theme_bw()

      if(!is.null(equal)){
        out <- out +
          ggplot2::geom_vline(xintercept = equal)
      }

    }
  }


  if(which == "p"){
    plot_df <- p_sum %>%
      as.data.frame() %>%
      mutate(site = str_extract_all(rownames(.), "[:digit:]+(?=\\.)"),
             samp = str_extract_all(rownames(.), "(?<=\\.)[:digit:]+"),
             site = as.numeric(site),
             samp = as.numeric(samp))
    xlab = "p"
    out <- list()
    if(hdi == T){
      for(i in 1:nrow(psi_sum)){
        title =  paste0('95% HDI credibility intervals for ', which, ' at site ', i)

        out[[i]] <- plot_df %>%
          filter(site == i) %>%
          ggplot2::ggplot() +
          ggplot2::geom_point(ggplot2::aes(x = `HDI 2.5%`, y = samp), shape = "|", size = 3) +
          ggplot2::geom_point(ggplot2::aes(x = `HDI 97.5%`, y = samp), shape = "|", size = 3) +
          ggplot2::geom_segment(ggplot2::aes(x = `HDI 2.5%`, y = samp, xend = `HDI 97.5%`, yend = samp)) +
          ggplot2::geom_point(ggplot2::aes(y = samp, x = Mean)) +
          ggplot2::labs(title = title,
                        x = xlab,
                        y = NULL) +
          ggplot2::xlim(0, 1) +
          ggplot2::theme_bw()
        if(!is.null(equal)){
          out <- out +
            ggplot2::geom_vline(xintercept = equal)
        }
      }

    } else if(hdi == F){
      for(i in 1:nrow(psi_sum)){
        title =  paste0('95% credibility intervals for ', which, ' at site ', i)

        out[[i]] <- plot_df %>%
          filter(site == i) %>%
          ggplot2::ggplot() +
          ggplot2::geom_point(ggplot2::aes(x = `2.5%`, y = samp), shape = "|", size = 3) +
          ggplot2::geom_point(ggplot2::aes(x = `97.5%`, y = samp), shape = "|", size = 3) +
          ggplot2::geom_segment(ggplot2::aes(x = `2.5%`, y = samp, xend = `97.5%`, yend = samp)) +
          ggplot2::geom_point(ggplot2::aes(y = samp, x = Mean)) +
          ggplot2::labs(title = title,
                        x = xlab,
                        y = NULL) +
          ggplot2::xlim(0, 1) +
          ggplot2::theme_bw()
        if(!is.null(equal)){
          out <- out +
            ggplot2::geom_vline(xintercept = equal)
        }
      }
    }
  }



  return(out)
}
