#' Trace plots for occupancy model parameters fit using the regularized horseshoe prior
#'
#' @description Plot method for objects of class \code{horseshoeocc}.
#'
#' @details
#' You may only select one group of parameters (i.e. \code{"beta"},
#' \code{"alpha"}, \code{"lambda"}, or \code{"kappa"}) to plot at a time.
#'
#' @param x an object of class \code{horseshoeocc}, typically a result of
#' a model fit using \code{\link{horseshoeocc}}.
#' @param which the parameters for which to generate trace plots. The value can
#' be a specific parameter (i.e. \code{"beta[1]"}), or you can plot the trace plots
#' for all of the beta coefficients using \code{"beta"}; defaults to \code{"beta"}.
#' @param ... Other arguments.
#'
#' @returns Returns a ggplot object that is a trace plot of the chosen model parameter(s).
#'
#' @examples
#' # continuing the horseshoeocc example:
#' ## trace plots for the alpha coefficients
#' plot(fit, "alpha")
#'
#' ## trace plots for the non-zero beta coefficients
#' plot(fit, c("beta0", "beta[1]", "beta[2]", "beta[3]"))
#'
#' ## trace plot for meff (either works)
#' plot(fit, "mefft")
#' plot(fit, "meff")
#'
#' @export
#'
#'
plot.horseshoeocc <- function(x, which = c("beta"), ...){
  x <- x$mcmc

  niter <- dim(x[[1]])[1]
  nchains <- length(x)
  param <- colnames(x[[1]])

  combined_samples <- do.call("rbind", x)
  combined_samples <- combined_samples %>%
    tibble::as_tibble() %>%
    dplyr::mutate(iter = rep(1:niter, nchains),
                  chain = factor(rep(1:nchains, each = niter))) %>%
    dplyr::select(chain,
                  iter,
                  everything()) %>%
    tidyr::pivot_longer(cols = -c(1:2),
                        names_to = "param",
                        values_to = "trace")

  if(all(length(which) == 1 & which == "alpha") |
     all(length(which) == 1 & which == "beta") |
     all(length(which) == 1 & which == "lambda") |
     all(length(which) == 1 & which == "kappa") |
     all(length(which) == 1 & which == "meff")){
    if(all(is.numeric(which))){
      vars <- unique(combined_samples$param)[which]
    } else {
      vars <- combined_samples %>%
        dplyr::slice(which(stringr::str_detect(param, which))) %>%
        dplyr::select(param) %>%
        unique() %>%
        as.vector()
    }

    if(length(vars) == 0) {
      stop(paste(which, "not found."))
    }

  } else if (length(which) == 1){
    if(all(is.numeric(which))){
      vars <- unique(combined_samples$param)[which]
    } else {
      vars <- combined_samples %>%
        dplyr::filter(param %in% which) %>%
        dplyr::select(param) %>%
        unique() %>%
        as.vector()
    }

    if(length(vars) == 0) {
      stop(paste(which, "not found."))
    }

  } else if(length(which) > 1){
    if(all(is.numeric(which))){
      vars <- unique(combined_samples$param)[which]
    } else {
      vars <- combined_samples %>%
        dplyr::filter(param %in% which) %>%
        dplyr::select(param) %>%
        unique() %>%
        as.vector()
    }

    if(length(vars) == 0) {
      stop(paste(which, "not found."))
    }
  }

  plot_df <- combined_samples %>%
    dplyr::filter(param %in% vars$param)

  p <- plot_df %>%
    ggplot2::ggplot(ggplot2::aes(x = iter, y = trace, col = chain, group = chain)) +
    ggplot2::geom_line() +
    ggplot2::theme_bw()

  if(length(unique(plot_df$param)) > 1){
    p <- p +
      ggplot2::facet_wrap(~ param, scales = "free_y")
  } else {
    p <- p
  }

  return(p)

}
